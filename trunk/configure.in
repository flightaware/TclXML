#!/bin/bash -norc
dnl	This file is an input file used by the GNU "autoconf" program to
dnl     generate the file "configure", which is run during Tcl installation
dnl     to configure the system for the local environment.
#
# Copyright (c) 2007-2008 Explain/Packaged Press.
#
# $Id: configure.in,v 1.15.2.1 2005/12/28 06:49:50 balls Exp $

#--------------------------------------------------------------------
# Configure script for package 'TclXML',
# TEA compliant.
#--------------------------------------------------------------------

#--------------------------------------------------------------------
# This very first macro is used to verify that the configure script can 
# find the sources.  The argument to AC_INIT is a unique filename for
# this package.
#--------------------------------------------------------------------

AC_INIT([Tclxml], [3.2])
PACKAGE_NAME=Tclxml
PACKAGE_VERSION=3.2

TEA_INIT([3.6])
AC_CONFIG_AUX_DIR(tclconfig)

TEA_PATH_TCLCONFIG
TEA_LOAD_TCLCONFIG

TEA_PREFIX

TEA_SETUP_COMPILER

#-----------------------------------------------------------------------
# Specify the C source files to compile in TEA_ADD_SOURCES,
# public headers that need to be installed in TEA_ADD_HEADERS,
# stub library C source files to compile in TEA_ADD_STUB_SOURCES,
# and runtime Tcl library files in TEA_ADD_TCL_SOURCES.
# This defines PKG(_STUB)_SOURCES, PKG(_STUB)_OBJECTS, PKG_HEADERS
# and PKG_TCL_SOURCES.
#-----------------------------------------------------------------------

TEA_ADD_SOURCES([tclxml.c docObj.c tclxml-libxml2.c nodeObj.c tcldom-libxml2.c tclxslt-libxslt.c])
TEA_ADD_HEADERS([include/tclxml-libxml2/docObj.h include/tclxml-libxml2/tclxml-libxml2.h include/tcldom/tcldom.h include/tcldom-libxml2/tcldom-libxml2.h include/tclxslt/tclxslt.h])
TEA_ADD_INCLUDES([-Iinclude])
#TEA_ADD_LIBS([-lexslt])
TEA_ADD_LIBS([])
TEA_ADD_CFLAGS([])
TEA_ADD_STUB_SOURCES([tclxmlStubInit.c tclxmlStubLib.c])
TEA_ADD_TCL_SOURCES([tclxml-tcl/xml__tcl.tcl tclxml-tcl/sgml-8.0.tcl tclxml-tcl/sgml-8.1.tcl tclxml-tcl/xml-8.0.tcl tclxml-tcl/xml-8.1.tcl tclxml-tcl/sgmlparser.tcl tclxml-tcl/tclparser-8.0.tcl tclxml-tcl/tclparser-8.1.tcl tclxml-tcl/xmldep.tcl tclxml-tcl/xpath.tcl tcldom-libxml2.tcl tcldom-tcl/xmlswitch.tcl tclxslt/process.tcl tclxslt/resources.tcl tclxslt/utilities.tcl tclxslt/xsltcache.tcl tclxslt-libxslt.tcl])

#--------------------------------------------------------------------
# A few miscellaneous platform-specific items:
#
# We have to define a special symbol for Windows (BUILD_Tclxml in this
# case) so that we create the export library with the dll.
#
# Windows creates a few extra files that need to be cleaned up.
# We can add more files to clean if our extension creates any extra
# files in the future.
#
# TEA_ADD_* any platform specific compiler/build info here.
#--------------------------------------------------------------------

CLEANFILES=pkgIndex.tcl
if test "${TEA_PLATFORM}" = "windows" ; then
    AC_DEFINE(BUILD_Tclxml, 1, [Build windows export dll])
    CLEANFILES="$CLEANFILES *.lib *.dll *.exp *.ilk *.pdb vc*.pch"
else
    :
fi
AC_SUBST(CLEANFILES)

TEA_PUBLIC_TCL_HEADERS

#--------------------------------------------------------------------
# Check whether --enable-threads or --disable-threads was given.
# So far only Tcl responds to this one.
#--------------------------------------------------------------------

TEA_ENABLE_THREADS

#--------------------------------------------------------------------
# The statement below defines a collection of symbols related to
# building as a shared library instead of a static library.
#--------------------------------------------------------------------

TEA_ENABLE_SHARED

#--------------------------------------------------------------------
# This macro figures out what flags to use with the compiler/linker
# when building shared/static debug/optimized objects.  This information
# can be taken from the tclConfig.sh file, but this figures it all out.
#--------------------------------------------------------------------

TEA_CONFIG_CFLAGS

#--------------------------------------------------------------------
# Set the default compiler switches based on the --enable-symbols option.
#--------------------------------------------------------------------

TEA_ENABLE_SYMBOLS

#--------------------------------------------------------------------
# Everyone should be linking against the Tcl stub library.  If you
# can't for some reason, remove this definition.  If you aren't using
# stubs, you also need to modify the SHLIB_LD_LIBS setting below to
# link against the non-stubbed Tcl library.
#--------------------------------------------------------------------

AC_DEFINE(USE_TCL_STUBS, 1, [Use Tcl stubs])

#--------------------------------------------------------------------
# This macro generates a line to use when building a library.  It
# depends on values set by the TEA_ENABLE_SHARED, TEA_ENABLE_SYMBOLS,
# and TEA_LOAD_TCLCONFIG macros above.
#--------------------------------------------------------------------

TEA_MAKE_LIB

#--------------------------------------------------------------------
# On Mac OS X we may want to build as a framework.
# This affects the location and naming of headers and libaries.
#--------------------------------------------------------------------

AC_ARG_ENABLE(framework, [  --enable-framework      build as a Mac OS X framework],
        [tcl_ok=$enableval], [tcl_ok=$1])

#--------------------------------------------------------------------
# Load libxml2 configuration
#--------------------------------------------------------------------

AC_MSG_CHECKING([for xml2-config script])

AC_ARG_WITH(xml2-config,
    [  --with-xml2-config      the xml2-config configuration script],
    with_xml2_config=${withval})

LIBXML2_CONFIG=
if test "x${with_xml2_config}" = "x" ; then
    for c in \
	/Library/Frameworks/libxml.framework/Resources/Scripts/xml2-config \
	${prefix}/bin/xml2-config \
	/usr/bin/xml2-config \
	/usr/local/bin/xml2-config
    do
	if test -x "$c" ; then
	    LIBXML2_CONFIG="$c"
	    break
	fi
    done
else
    LIBXML2_CONFIG="${with_xml2_config}"
fi
if test "x$LIBXML2_CONFIG" = "x" ; then
    AC_MSG_ERROR([unable to find xml2-config])
else
    AC_MSG_RESULT([${LIBXML2_CONFIG}])
    XML2_VERSION=`${LIBXML2_CONFIG} --version`
    XML2_PREFIX=`${LIBXML2_CONFIG} --prefix`
    XML2_LIBS="`${LIBXML2_CONFIG} --libs`"
    XML2_CFLAGS=`${LIBXML2_CONFIG} --cflags`
fi

AC_SUBST(XML2_PREFIX)
AC_SUBST(XML2_CFLAGS)
AC_SUBST(XML2_VERSION)

#--------------------------------------------------------------------
# Load libxslt configuration
#--------------------------------------------------------------------

AC_MSG_CHECKING([for xslt-config script])

AC_ARG_WITH(xslt-config,
    [  --with-xslt-config      the xslt-config configuration script],
    with_xslt_config=${withval})

LIBXSLT_CONFIG=
if test "x${with_xslt_config}" = "x" ; then
    if test "x${with_xml2_config}" = "x" ; then
	:
    else
	if test -x "`dirname ${with_xml2_config}`/xslt-config" ; then
	    LIBXSLT_CONFIG="`dirname ${with_xml2_config}`/xslt-config"
	fi
    fi
else
    LIBXSLT_CONFIG="${with_xslt_config}"
fi
if test "x${LIBXSLT_CONFIG}" = "x" ; then
    for c in \
	/Library/Frameworks/libxslt.framework/Resources/Scripts/xslt-config \
	${prefix}/bin/xslt-config \
	/usr/bin/xslt-config \
	/usr/local/bin/xslt-config
    do
	if test -x "$c" ; then
	    LIBXSLT_CONFIG="$c"
	    break
	fi
    done
fi
if test "x$LIBXSLT_CONFIG" = "x" ; then
    AC_MSG_ERROR([unable to find xslt-config script])
else
    AC_MSG_RESULT([${LIBXSLT_CONFIG}])
    XSLT_VERSION=`${LIBXSLT_CONFIG} --version`
    XSLT_PREFIX=`${LIBXSLT_CONFIG} --prefix`
    XSLT_CFLAGS=`${LIBXSLT_CONFIG} --cflags`
    XSLT_LIBS="`${LIBXSLT_CONFIG} --libs` -lexslt"
fi

AC_SUBST(XSLT_VERSION)
AC_SUBST(XSLT_PREFIX)
AC_SUBST(XSLT_CFLAGS)

#--------------------------------------------------------------------
# See if we want to statically link the libxml2 and libxslt
# libraries. This is desirable for Tclkit.
#--------------------------------------------------------------------

AC_MSG_CHECKING([for static linking of XML/XSLT libraries])

AC_ARG_WITH(xml-static,
    [  --with-xml-static      statically link the XML libraries],
    with_xml_static=${withval})

XML_STATIC="0"
if test "${with_xml_static}" = "1" ; then
    XML_STATIC="1"
    AC_MSG_RESULT([use static linking])
else
    AC_MSG_RESULT([use dynamic linking])
fi

AC_SUBST(XML_STATIC)

#--------------------------------------------------------------------
# __CHANGE__
# Add platform libs to LIBS or SHLIB_LD_LIBS as necessary.
#--------------------------------------------------------------------

FIX_LIB=":"
if test "${TEA_PLATFORM}" = "windows" -a "$GCC" != "yes" ; then
    SHLIB_LD_LIBS="${SHLIB_LD_LIBS} \"`${CYGPATH} ${LIBXSLT_LIBDIR}/libxslt.lib`\""
    SHLIB_LD_LIBS="${SHLIB_LD_LIBS} \"`${CYGPATH} ${LIBXSLT_LIBDIR}/libexslt.lib`\""
    SHLIB_LD_LIBS="${SHLIB_LD_LIBS} \"`${CYGPATH} ${LIBXML2_LIBDIR}/libxml2.lib`\""
else
if test "${XML_STATIC}" = "0" ; then
    echo "setting up dynamic linking"
    SHLIB_LD_LIBS="${SHLIB_LD_LIBS} \${XSLT_LIBS}"
else
    SHLIB_LD_LIBS="${SHLIB_LD_LIBS} ${XSLT_PREFIX}/lib/libexslt.a"
    SHLIB_LD_LIBS="${SHLIB_LD_LIBS} ${XSLT_PREFIX}/lib/libxslt.a"
    SHLIB_LD_LIBS="${SHLIB_LD_LIBS} ${XML2_PREFIX}/lib/libxml2.a"
    SHLIB_LD_LIBS="${SHLIB_LD_LIBS} -L/usr/lib -lgcrypt -lgpg-error -lz -lm"
    XML2_LIBS=
    XSLT_LIBS=
    FIX_LIB="chcon -t texrel_shlib_t"
fi
fi

# Enabling static linking modifies the setting of the libraries,
# so delay substitution until this point.
AC_SUBST(XML2_LIBS)
AC_SUBST(XSLT_LIBS)
AC_SUBST(FIX_LIB)

#--------------------------------------------------------------------
# Find tclsh so that we can run pkg_mkIndex to generate the pkgIndex.tcl
# file during the install process.  Don't run the TCLSH_PROG through
# ${CYGPATH} because it's being used directly by make.
# Require that we use a tclsh shell version 8.2 or later since earlier
# versions have bugs in the pkg_mkIndex routine.
# Add WISH as well if this is a Tk extension.
#--------------------------------------------------------------------

TEA_PROG_TCLSH

#--------------------------------------------------------------------
# These are for tclxmlConfig.sh
#--------------------------------------------------------------------

# pkglibdir must be a fully qualified path and (not ${exec_prefix}/lib)
eval pkglibdir="${libdir}/${PACKAGE_NAME}${PACKAGE_VERSION}"
if test "${TCL_LIB_VERSIONS_OK}" = "ok"; then
    eval Tclxml_LIB_FLAG="-l${PACKAGE_NAME}${PACKAGE_VERSION}${DBGX}"
else
    eval Tclxml_LIB_FLAG="-l${PACKAGE_NAME}`echo ${PACKAGE_VERSION} | tr -d .`${DBGX}"
fi
Tclxml_BUILD_LIB_SPEC="-L`pwd` ${Tclxml_LIB_FLAG}"
Tclxml_LIB_SPEC="-L${pkglibdir} ${Tclxml_LIB_FLAG}"

if test "${TCL_LIB_VERSIONS_OK}" = "ok"; then
    eval Tclxml_STUB_LIB_FLAG="-l${PACKAGE_NAME}stub${PACKAGE_VERSION}${DBGX}"
else
    eval Tclxml_STUB_LIB_FLAG="-l${PACKAGE_NAME}stub`echo ${PACKAGE_VERSION} | tr -d .`${DBGX}"
fi
Tclxml_BUILD_STUB_LIB_SPEC="-L`pwd` ${Tclxml_STUB_LIB_FLAG}"
Tclxml_STUB_LIB_SPEC="-L${pkglibdir} ${Tclxml_STUB_LIB_FLAG}"
Tclxml_BUILD_STUB_LIB_PATH="`pwd`/${Tclxmlstub_LIB_FILE}"
Tclxml_STUB_LIB_PATH="${pkglibdir}/${Tclxmlstub_LIB_FILE}"
eval pkgincludedir="${includedir}"
Tclxml_INCLUDE_SPEC="-I${pkgincludedir}"

AC_SUBST(Tclxml_BUILD_LIB_SPEC)
AC_SUBST(Tclxml_LIB_SPEC)
AC_SUBST(Tclxml_BUILD_STUB_LIB_SPEC)
AC_SUBST(Tclxml_STUB_LIB_SPEC)
AC_SUBST(Tclxml_BUILD_STUB_LIB_PATH)
AC_SUBST(Tclxml_STUB_LIB_PATH)
AC_SUBST(Tclxml_INCLUDE_SPEC)

#--------------------------------------------------------------------
# TODO: search for an appropriate xsltproc to use
#--------------------------------------------------------------------

XSLTPROC=xsltproc
AC_SUBST(XSLTPROC)

#--------------------------------------------------------------------
# Finally, substitute all of the various values into the Makefile.
# You may alternatively have a special pkgIndex.tcl.in or other files
# which require substituting th AC variables in.  Include these here.
#--------------------------------------------------------------------

AC_OUTPUT([Makefile Makefile.macosx pkgIndex.tcl TclxmlConfig.sh include/tclxml/tclxml.h doc/tclxml.xml doc/tcldom.xml doc/tclxslt.xml doc/README.xml])

#--------------------------------------------------------------------
