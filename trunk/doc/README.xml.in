<!DOCTYPE d:article [
  <!ENTITY version "@PACKAGE_VERSION@">
]>
<d:article xmlns:d='http://docbook.org/ns/docbook'
	   xmlns:xlink='http://www.w3.org/1999/xlink'>
  <d:info>
    <d:title>XML Support For Tcl</d:title>
    <d:subtitle>TclXML, TclDOM and TclXSLT</d:subtitle>

    <d:releaseinfo>$Id: README.xml,v 1.7 2005/05/20 12:02:18 balls Exp $</d:releaseinfo>

    <d:revhistory>
      <d:revision>
	<d:revnumber>&version;</d:revnumber>
      </d:revision>
    </d:revhistory>

    <d:author>
      <d:firstname>Steve</d:firstname>
      <d:surname>Ball</d:surname>
      <d:affiliation>
	<d:orgname>Explain</d:orgname>
	<d:address>
	  <d:otheraddr>
	    <d:link xlink:href='http://www.explain.com.au/'>www.explain.com.au</d:link>
	  </d:otheraddr>
	</d:address>
      </d:affiliation>
    </d:author>
  </d:info>

  <d:para>This package provides XML support for Tcl scripts. Support includes parsing of XML documents, a DOM (tree) interface and transformations using XSLT. Previously all of these features were spread across three packages; TclXML, TclDOM and TclXSLT. Now one package provides them all.</d:para>

  <d:para>See <d:link xlink:href='http://tclxml.sourceforge.net/'>the website</d:link> for more information on XML support for Tcl.</d:para>

  <d:para>Contact <d:link xlink:href='mailto:Steve.Ball@explain.com.au'>Steve Ball</d:link> for information about this release.</d:para>

  <d:sect1>
    <d:info>
      <d:title>Parsing XML Documents</d:title>
    </d:info>

    <d:para>For parsing XML there is a generic front-end interface with plugin parser implementations.  Two parser implementations or wrappers are provided:</d:para>

    <d:itemizedlist>
      <d:listitem>
	<d:para>Gnome libxml2 library.  This package is known as TclXML/libxml2.</d:para>
      </d:listitem>
      <d:listitem>
	<d:para>A generic Tcl implementation (which does not require compilation).  This package is known as TclXML/tcl.</d:para>
      </d:listitem>
    </d:itemizedlist>

    <d:para>See the <d:link xlink:href='doc/tclxml.html'>TclXML manual</d:link> for further details.</d:para>
  </d:sect1>

  <d:sect1>
    <d:info>
      <d:title>Scripting XML Documents</d:title>
    </d:info>

    <d:para>Applications are much easier to write when they access a tree representation of the XML document. The W3C DOM provides a standard definition of a tree and the methods used to navigate and manipulate it. TclDOM is an implementation of the DOM standard for Tcl. One of two DOM implementations may be installed:</d:para>

    <d:itemizedlist>
      <d:listitem>
	<d:para>Gnome libxml2 library.  This package is known as TclDOM/libxml2.</d:para>
      </d:listitem>
      <d:listitem>
	<d:para>A generic Tcl implementation (which does not require compilation).  This package is known as TclDOM/tcl.</d:para>
      </d:listitem>
    </d:itemizedlist>

    <d:para>Only one of these will be installed on your system. See the <d:link xlink:href='doc/tcldom.html'>TclDOM manual</d:link> for further details.</d:para>
  </d:sect1>

  <d:sect1>
    <d:info>
      <d:title>Transforming XML Documents</d:title>
    </d:info>

    <d:para>XSL Transformations (XSLT) creates a new document from a source XML document and a XSL stylesheet. The Gnome libxslt is used as the underlying transformation engine.</d:para>

    <d:para>See the <d:link xlink:href='doc/tclxslt.html'>TclXSLT manual</d:link> for further details.</d:para>
  </d:sect1>

  <d:sect1 id='installation'>
    <d:info>
      <d:title>Installation</d:title>
    </d:info>

    <d:sect2>
      <d:info>
	<d:title>Dependencies</d:title>
      </d:info>

      <d:variablelist>
	<d:varlistentry>
	  <d:term>Tcllib</d:term>
	  <d:listitem>
	    <d:para><d:link xlink:href='http://www.tcl.tk/software/tcllib/'>http://www.tcl.tk/software/tcllib/</d:link></d:para>

	    <d:para>In order for the Tcl-only parser to resolve external entities, the tcllib package must be installed.</d:para>

	    <d:para>Be sure to get a version which includes the <d:tclpackage>uri</d:tclpackage> package.  Version 1.2 or better is recommended.</d:para>
	    <d:itemizedlist>
	      <d:listitem>
		<d:para><d:link xlink:href='ftp://prdownloads.sf.net/tcllib/tcllib-1.11.tar.gz'>GZip'd tarball</d:link></d:para>
	      </d:listitem>
	      <d:listitem>
		<d:para><d:link xlink:href='ftp://prdownloads.sf.net/tcllib/tcllib-1.11.zip'>ZIP file</d:link></d:para>
	      </d:listitem>
	    </d:itemizedlist>
	    <d:para>The latest CVS snapshot may be found at <d:link xlink:href='http://sourceforge.net/projects/tcllib'>the SourceForge project page</d:link>.</d:para>
	  </d:listitem>
	</d:varlistentry>
	<d:varlistentry>
	  <d:term>libxml2, libxslt</d:term>
	  <d:listitem>
	    <d:para>libxml2 and libxslt are required for the compiled version of the TclXML/libxml2 package.  libiconv may also be required.</d:para>

	    <d:para>The source code for libxml2, libxslt and libiconv is <d:emphasis>not</d:emphasis> supplied with this package.  Download libxml2 and libxslt from <d:link xlink:href='http://xmlsoft.org/'>xmlsoft.org</d:link> separately, and libiconv from a GNU mirror site.</d:para>

	    <d:para>libxml2 version 2.7.2 (or better) and libxslt version 1.1.24 are recommended.</d:para>
	  </d:listitem>
	</d:varlistentry>
      </d:variablelist>
    </d:sect2>

    <d:sect1>
      <d:info>
	<d:title>Compiled Installation</d:title>
      </d:info>

      <d:sect2>
	<d:info>
	  <d:title>Unix/Linux</d:title>
	</d:info>

	<d:para>You must have Tcl/Tk version 8.2 or better installed on your system.  Tcl/Tk 8.3 or better is recommended. TclXML v&version; has been tested with Tcl/Tk 8.5.</d:para>

	<d:orderedlist>
	  <d:listitem>
	    <d:para>Make sure you have Tcllib 1.2 (or better) installed.  Tcllib is still required, even for the compiled parser.</d:para>
	  </d:listitem>
	  <d:listitem>
	    <d:para>If you wish to use TclXML/libxml2, make sure libxml2-2.7.2 (or better) is installed.</d:para>
	  </d:listitem>
	  <d:listitem>
	    <d:para>Unpack the TclXML distribution and <d:command>cd</d:command> into the <d:filename>tclxml-&version;</d:filename> directory.</d:para>
	  </d:listitem>
	  <d:listitem>
	    <d:para>Unpack libxml2 and libxslt...</d:para>
	  </d:listitem>
	  <d:listitem>
	    <d:para>Run the <d:filename>configure</d:filename> script, with the <d:arg>--prefix</d:arg> and <d:arg>--enable-threads</d:arg> switches (the latter only if Tcl has been built with threads enabled).  For example, on my system I have Tcl 8.5 installed in <d:filename>/usr/local/tcl8.5</d:filename> so I would use the command:</d:para>

	    <d:programlisting>./configure --prefix=/usr/local/tcl8.5 --enable-threads</d:programlisting>
	  </d:listitem>
	  <d:listitem>
	    <d:programlisting>make</d:programlisting>
	  </d:listitem>
	  <d:listitem>
	    <d:note>Don't test the package using <d:literal>make test</d:literal> until all of the packages are installed (it is a current deficiency of the build system that the individual modules cannot be tested before installation - we hope to fix this soon!).</d:note>
	  </d:listitem>
	  <d:listitem>
	    <d:programlisting>make install</d:programlisting>

	    <d:para>You may need to do this as root.  This installs the pure-Tcl parser class, as well as support files required for the next step.</d:para>
	  </d:listitem>
	  <d:listitem>
	    <d:programlisting>cd expat</d:programlisting>

	    <d:para>Now TclXML/expat is about to be built.</d:para>
	  </d:listitem>
	  <d:listitem>
	    <d:para>Use exactly the same configure command from step (4) above.</d:para>
	  </d:listitem>
	  <d:listitem>
	    <d:programlisting>make</d:programlisting>
	  </d:listitem>
	  <d:listitem>
	    <d:programlisting>make install</d:programlisting>

	    <d:para>You may need to do this as root.  This installs the expat parser class.</d:para>
	  </d:listitem>
	  <d:listitem>
	    <d:programlisting>cd ../libxml2</d:programlisting>

	    <d:para>Now TclXML/libxml2 is about to be built.  Remember, you must have built and installed libxml2 first.</d:para>
	  </d:listitem>
	  <d:listitem>
	    <d:para>Use exactly the same configure command from step (4) above.</d:para>
	  </d:listitem>
	  <d:listitem>
	    <d:programlisting>make</d:programlisting>
	  </d:listitem>
	  <d:listitem>
	    <d:programlisting>make install</d:programlisting>

	    <d:para>You may need to do this as root.  This installs the libxml2 parser class.</d:para>
	  </d:listitem>
	  <d:listitem>
	    <d:programlisting>cd ..; make test</d:programlisting>
	  </d:listitem>
	</d:orderedlist>
      </d:section>

      <d:section>
	<d:title>Windows (MS VC++)</d:title>

	<d:note>[Advice:  ActiveTcl includes binaries for TclXML.]</d:note>

	<d:para>You must have Tcl/Tk version 8.2 or better installed on your system.  Tcl/Tk 8.3 or better is recommended.</d:para>

	<d:para>Before starting, download the binaries for libxml2 (or build them from source).  <d:link xlink:href='http://xmlsoft.org/'>xmlsoft</d:link> has a link to the MS Windows binary distribution.</d:para>

	<d:para>If you have a TEA build environment setup, just use the normal <d:literal>configure/make/make install</d:literal> pattern.</d:para>

	<d:para>Alternatively, the <d:filename>win</d:filename> subdirectory contains a <d:filename>makefile.vc</d:filename> file for Visual Studio C++ v6.0.  This makefile builds both the expat and libxml2 parser classes.  In a Command Prompt window set up your environment so that <d:application>nmake</d:application> is on the path (by running <d:filename>VCVARS32.BAT</d:filename>), then type the following:</d:para>

	<d:informalexample>
	  <d:programlisting>nmake -f makefile.vc TCLDIR=<d:replaceable>C:\Path\To\Tcl</d:replaceable> INSTALLDIR=<d:replaceable>C:\Path\To\Tcl</d:replaceable> LIBZDIR=<d:replaceable>C:\Path\To\libz</d:replaceable> LIBICONVDIR=<d:replaceable>C:\Path\To\libiconv</d:replaceable> LIBXML2DIR=<d:replaceable>C:\Path\To\libxml2</d:replaceable></d:programlisting>
	</d:informalexample>

	<d:para>As an example, on my system I have Tcl installed in <d:filename>C:\Tcl</d:filename> and the libxml2 binaries unpacked in the directory <d:filename>C:\gnome</d:filename>.  Accordingly, I would use the following command line:</d:para>
	<d:informalexample>
	  <d:programlisting>nmake -f makefile.vc TCLDIR=C:\Tcl INSTALLDIR=C:\Tcl LIBZDIR=C:\gnome\zlib-1.1.4.win32 LIBICONVDIR=C:\gnome\libiconv-1.9.1.win32 LIBXML2DIR=C:\gnome\libxml2-2.6.9.win32</d:programlisting>
	</d:informalexample>

	<d:para>Install the package by appending 'install' to the command line used above, for example:</d:para>

	<d:informalexample>
	  <d:programlisting>nmake -f makefile.vc TCLDIR=<d:replaceable>C:\Path\To\Tcl</d:replaceable> INSTALLDIR=<d:replaceable>C:\Path\To\Tcl</d:replaceable> LIBZDIR=<replaceable>C:\Path\To\libz</d:replaceable> LIBICONVDIR=<d:replaceable>C:\Path\To\libiconv</d:replaceable> LIBXML2DIR=<d:replaceable>C:\Path\To\libxml2</d:replaceable> install</d:programlisting>
	</d:informalexample>
      </d:section>

      <d:section>
	<d:title>Macintosh OS X</d:title>

	<d:para>There are two ways to build TclXML under Mac OS X:</d:para>
	<d:orderedlist>
	  <d:listitem>
	    <d:para>The usual Unix way, see above.</d:para>
	  </d:listitem>
	  <d:listitem>
	    <d:para>As an embedded Framework using Xcode.</d:para>
	  </d:listitem>
	</d:orderedlist>

	<d:para>The <d:filename>macosx</d:filename> directory contains the Xcode files for building under OS X (Panther).  TclXML has been tested on OS X 10.3 (or is that X.3?).</d:para>

	<d:para>Start-up the project.  Make sure that the references to the libxml2 and Tcl external frameworks are correct.  Select the 'Make' target and build.  This builds everything.  The result is six Mac OS X Frameworks; three "normal" and three "embedded".  The embedded frameworks will be in the <d:filename>embedded</d:filename> subdirectory of the Build Products directory.  Copy <d:filename>tclxml.framework</d:filename>, <d:filename>TclXMLlibxml2.framework</d:filename> and <d:filename>expat.framework</d:filename> to any of the usual places for frameworks (<d:filename>~/Library/Frameworks</d:filename>, <d:filename>/Library/Frameworks</d:filename>, etc).</d:para>

	<d:para>For earlier version of OS X using Project Builder, you will have to retrieve a previous version of the Project Builder files from the CVS repository.</d:para>
      </d:section>

      <d:section>
	<d:title>Macintosh OS 9 (or earlier)</d:title>

	<d:para>The installer script doesn't work properly on Macintosh yet, and the binary parsers have not been ported yet (sorry).</d:para>

	<d:para>Since the distribution has an all-Tcl parser, you can get a working parser fairly easily.</d:para>

	<d:para>Copy the <d:filename>library</d:filename> folder to the Tcl library folder in the Extensions folder of the System folder.</d:para>

	<d:para>Rename the <d:filename>library</d:filename> folder to <d:filename>tclxml&version;</d:filename>.  This isn't strictly necessary, but it helps keep things organised.</d:para>

	<d:para>You're on your own as far as the demos, programs and documentation go.</d:para>
      </d:section>
    </d:section>
  </d:section>

  <d:section>
    <d:title>Usage</d:title>

    <d:para>See the website for links to tutorials and the reference manual.</d:para>

    <d:para>In the meantime, here's a quick tutorial:</d:para>

    <d:programlisting>
package require xml

set parser [xml::parser]
$parser configure -elementstartcommand EStart \
    -characterdatacommand PCData

proc EStart {tag attlist args} {
    array set attr $attlist
    puts "Element \"$tag\" started with [array size attr] attributes"
}

proc PCData text {
    incr ::count [string length $text]
}

set count 0
$parser parse [read stdin]

puts "The document contained $count characters"
exit 0
</d:programlisting>
  </d:section>

  <d:section>
    <d:title>XPath</d:title>

    <d:para>In addition to XML parsing packages, TclXML also provides a package for parsing XPath location paths.  The XPath package only parsing the path's syntax, it does interpret the path.  See <d:link xlink:href='http://tclxml.sourceforge.net/tcldom.html'>TclDOM</d:link> for a package that will interpret XPath location paths.</d:para>

    <d:note>This package is in its infancy, and does not support the full range of XPath features.  Only a very limited subset of location paths are supported, of the form "/simple/example[2]".  Paths within predicates will definitely fail.</d:note>

    <d:para>To use the XPath package:</d:para>

    <d:programlisting>
package require xpath
</d:programlisting>

    <d:para>To parse a location path:</d:para>

    <d:programlisting>
xpath::split {/simple/example}
</d:programlisting>

    <d:para>This returns a Tcl list, each element of which is a three element sublist: {axis node-test {?predicate ...?}}.</d:para>
  </d:section>
</d:article>

